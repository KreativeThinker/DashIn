import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { LineChart, Line, XAxis, YAxis } from "recharts";
import { DatePicker } from "../date-picker";
import API_BASE_URL from "@/config/api";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "../ui/chart";

export default function InsightsOverTimeBySector() {
  const [data, setData] = useState([]);
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [loading, setLoading] = useState(false);
  // selectedSectors is maintained as a Set of visible sector strings.
  const [selectedSectors, setSelectedSectors] = useState(new Set());

  const fetchDateRange = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/utils/date-range`);
      const result = await response.json();
      setStartDate(new Date(result.min_date));
      setEndDate(new Date(result.max_date));
    } catch (error) {
      console.error("Error fetching date range:", error);
    }
  };

  const fetchData = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams();
      if (startDate) params.append("start_date", startDate.toISOString().split("T")[0]);
      if (endDate) params.append("end_date", endDate.toISOString().split("T")[0]);

      const response = await fetch(`${API_BASE_URL}/insights/sector?${params}`);
      const result = await response.json();

      // Group data by week. Each object has a week key and keys for each sector.
      const groupedData = result.reduce((acc, { week, sector, count }) => {
        let entry = acc.find((item) => item.week === week);
        if (!entry) {
          entry = { week };
          acc.push(entry);
        }
        entry[sector || "Unknown"] = (entry[sector || "Unknown"] || 0) + count;
        return acc;
      }, []);

      setData(groupedData);

      // Extract unique sectors from grouped data
      const uniqueSectors = Array.from(
        new Set(groupedData.flatMap((item) => Object.keys(item).filter((key) => key !== "week")))
      );
      // By default, show all sectors
      setSelectedSectors(new Set(uniqueSectors));
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDateRange();
    fetchData();
  }, []);

  // Compute unique sectors for color mapping
  const sectors = Array.from(
    new Set(data.flatMap((item) => Object.keys(item).filter((key) => key !== "week")))
  );
  const sectorColors = sectors.reduce((acc, sector, index) => {
    acc[sector] = `hsl(${index * 19}, 70%, 50%)`;
    return acc;
  }, {});

  // Toggle sector visibility
  const toggleSector = (sector) => {
    setSelectedSectors((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(sector)) {
        newSet.delete(sector);
      } else {
        newSet.add(sector);
      }
      return newSet;
    });
  };

  const toggleAllSectors = () => {
    setSelectedSectors((prev) => {
      const newSet = new Set(prev);
      newSet.forEach((sector) => {
        if (newSet.has(sector)) {
          newSet.delete(sector);
        } else {
          newSet.add(sector);
        }
      });
      return newSet;
    });
  };

  return (
    <div>
      <div className="mb-4 flex w-full justify-center gap-4">
        <CardHeader className="flex flex-1 flex-col">
          <CardTitle>Insights by Sector</CardTitle>
          <CardDescription>Insights generated by sector over time</CardDescription>
        </CardHeader>{" "}
        <DatePicker selected={startDate} onChange={setStartDate} placeholderText="Start Date" />
        <DatePicker selected={endDate} onChange={setEndDate} placeholderText="End Date" />
        <Button onClick={fetchData} disabled={loading} variant="outline">
          {loading ? "Loading..." : "Apply"}
        </Button>
      </div>
      {/* Custom Legend with individual toggles */}
      <div className="mb-4 flex flex-wrap justify-center gap-2 px-4">
        {sectors.map((sector) => (
          <Button
            key={sector}
            variant={selectedSectors.has(sector) ? "outline" : "secondary"}
            onClick={() => toggleSector(sector)}
            style={{ borderColor: sectorColors[sector], color: sectorColors[sector] }}
          >
            {sector}
          </Button>
        ))}
        <Button variant="destructive" onClick={() => toggleAllSectors()}>
          Remove All
        </Button>
      </div>
      <ChartContainer config={{}} className="h-96 w-full">
        <LineChart data={data}>
          <XAxis dataKey="week" label={{ value: "Week", position: "insideBottom", offset: -5 }} />
          <YAxis label={{ value: "Count", angle: -90, position: "insideLeft" }} />

          {/* Render a Line for each selected sector */}
          <ChartTooltip content={<ChartTooltipContent hideLabel />} />
          {Array.from(selectedSectors).map((sector, index) => (
            <Line
              key={sector}
              type="monotone"
              dataKey={sector}
              stroke={sectorColors[sector] || "black"}
              name={sector}
              dot={{ fill: sectorColors[sector] || "black" }}
              connectNulls={true}
              accessibilityLayer
            />
          ))}
        </LineChart>
      </ChartContainer>
    </div>
  );
}
